/*
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BipV2 } from 'src/app/core/models';
import { AppRoutes } from 'src/app/shared/routes/routes';
interface Doctor {
  id: number;
  full_name: string;
  avatar: string | null;
}

interface AssestmentConductedOption {
  index: number;
  assestment_title: string;
  assestment_status: string;
}

interface AssestmentEvaluationSetting {
  index: number;
  other: string;
  tangible: string;
  activities: string;
}

interface PrevalentSettingEventAndAtecedent {
  index: number;
  prevalent_setting_event_and_atecedent: string;
  behavior: string;
  hypothesized_functions: string;
}

interface Intervention {
  index: number;
  titleIntervention: string;
  descriptionIntervention: string;
}

interface Tangible {
  index: number;
  preventive_strategies: string;
  manager_strategies: string;
}

interface Attention {
  index: number;
  preventive_strategies_a: string;
  replacement_skills_a: string;
  manager_strategies_a: string;
}

interface Escape {
  index: number;
  preventive_strategies_e: string;
  replacement_skills_e: string;
  manager_strategies_e: string;
}

interface Sensory {
  index: number;
  preventive_strategies_s: string;
  replacement_skills_s: string;
  manager_strategies_s: string;
}

interface BIP {
  id: number;
  type_of_assessment: number;
  doctor_id: number;
  doctor: Doctor;
  patient_id: string;
  background_information: string;
  previus_treatment_and_result: string;
  current_treatment_and_progress: string;
  education_status: string;
  phisical_and_medical_status: string;
  assestment_conducted: string;
  strengths: string;
  weakneses: string;
  documents_reviewed: string[];
  maladaptives: any; // or specific type if known
  assestment_conducted_options: AssestmentConductedOption[];
  assestmentEvaluationSettings: AssestmentEvaluationSetting[];
  prevalent_setting_event_and_atecedents: PrevalentSettingEventAndAtecedent[];
  interventions: Intervention[];
  goal_stos: any; // or specific type if known
  goal_ltos: any; // or specific type if known
  hypothesis_based_intervention: string;
  tangibles: Tangible[];
  attention: Attention[];
  escape: Escape[];
  sensory: Sensory[];
  phiysical_and_medical: string;
  phiysical_and_medical_status: any[]; // specify type if known
  reduction_goal: any[]; // specify type if known
  sustitution_goal: any[]; // specify type if known
  family_envolment: any[]; // specify type if known
  monitoring_evalutating: any[]; // specify type if known
  generalization_training: any[]; // specify type if known
  crisis_plan: any[]; // specify type if known
  de_escalation_technique: any[]; // specify type if known
  consent_to_treatment: any[]; // specify type if known
  created_at: string; // date string
}

interface PatientBIP {
  patient_id: string;
  bip: BIP;
  type_of_assessment: number;
  documents_reviewed: string[];
  maladaptives: any[]; // specify type if known
  assestment_conducted_options: AssestmentConductedOption[];
  prevalent_setting_event_and_atecedents: PrevalentSettingEventAndAtecedent[];
  interventions: Intervention[];
  assestmentEvaluationSettings: AssestmentEvaluationSetting[];
  tangibles: Tangible[];
  attention: Attention[];
  escape: Escape[];
  sensory: Sensory[];
  phiysical_and_medical_status: any[]; // specify type if known
}
@Component({
  selector: "app-bip-form",
  templateUrl: "./bip-form.component.html",
  styleUrls: ["./bip-form.component.scss"],
})
export class BipFormComponent {
  routes = AppRoutes;
  @Input() bip: BipV2;
  @Output() bipChange = new EventEmitter<BipV2>();
  @Output() save = new EventEmitter<void>();

  onSave() {
    this.bipChange.emit(this.bip);
    setTimeout(() => {
      this.save.emit();
    }, 0);
  }

  ngOnInit(): void {
    console.log(this.bip);
    // //inicia la vista siempre desde arriba
    //me subcribo al id recibido por el parametro de la url
    this.ativatedRoute.params.subscribe((resp) => {
      this.patient.patient_identifier = resp['patient_id']; // la respuesta se comienza a relacionar  en este momento con un cliente especifico
    });
    // this.getProfileBip(); // se pide el perfil del paciente por el bip relacionado

    // this.ativatedRoute.params.subscribe(({ id }) => this.getBip()); //se pide el id del bip creado para traer la info necesaria
    this.user = this.authService.user as AppUser;
    this.doctor_id = this.user?.id; //se asigna el doctor logueado a este campo para poderlo enviar en los

    this.accesstoSensories = [];
  }

  private handleClientSelectedChange() {
    if (this.patient) {
      this.first_name = this.patient.first_name;
      this.last_name = this.patient.last_name;
      this.patient_identifier = this.patient.patient_identifier;
      this.phone = this.patient.phone;
      this.parent_guardian_name = this.patient.parent_guardian_name;
      this.relationship = this.patient.relationship;
      this.address = this.patient.address;
      this.age = this.patient.age;
      console.log((this.patient as any).dob);
      // this.dob = this.patient.dob;
    }
  }

  private handleBipSelectedChange() {

    if (this.bipSelected) {
      this.bip = this.bipSelected;
      this.current_treatment_and_progress =
        this.bipSelected.bip.current_treatment_and_progress;
      this.education_status = this.bipSelected.bip.education_status;
      this.phisical_and_medical_status =
        this.bipSelected.bip.phisical_and_medical_status;
      this.assestment_conducted = this.bipSelected.bip.assestment_conducted;
      this.strengths = this.bipSelected.bip.strengths;
      this.weakneses = this.bipSelected.bip.weakneses;
      this.documents = this.bipSelected.documents_reviewed;
      this.maladaptives = this.bipSelected.maladaptives;
      this.maladaptive_behavior = this.bipSelected.maladaptives?.[0].title;
      this.assesstments = this.bipSelected.assestment_conducted_options;
      this.assesstmentsDocuments =
        this.bipSelected.assestment_conducted_options;
      this.hypothesis_based_intervention =
        this.bipSelected.bip.hypothesis_based_intervention;
      this.assestmentEvaluationSettings =
        this.bipSelected.assestmentEvaluationSettings;
      this.accesstoTangibles = this.bipSelected.tangibles;
      this.accesstoAttention = this.bipSelected.attention;
      this.accesstoEscape = this.bipSelected.escape;
      this.accesstoSensories = this.bipSelected.sensory;
      this.phiysical_and_medical = this.bipSelected.bip.phiysical_and_medical;
      this.phiysical_and_medical_status =
        this.bipSelected.phiysical_and_medical_status;
      this.prevalent_setting_event_and_atecedents =
        this.bipSelected.prevalent_setting_event_and_atecedents;
      this.interventions = this.bipSelected.interventions;
    }
  }


  //se obtiene el perfil del usuario, por el cliente_id  que seria igual al id de la url
  // getProfileBip() {
  //   this.bipService.showBipProfile(this.patient_identifier).subscribe((resp) => {
  //     // console.log(resp);
  //     this.client_selected = resp.patient; // asignamos el objeto a nuestra variable

  //     //traemos la info del usuario
  //     if (this.client_selected.type !== null) {
  //       // si hay o no informacion del paciente
  //       if (this.client_selected.eligibility === 'yes') {
  //         // si el status es positivo para proceder
  //         this.first_name = this.client_selected.first_name;
  //         this.last_name = this.client_selected.last_name;
  //         this.patient_identifier = this.client_selected.patient_identifier;
  //         this.phone = this.client_selected.phone;
  //         this.parent_guardian_name =
  //           this.client_selected.parent_guardian_name;
  //         this.relationship = this.client_selected.relationship;
  //         this.address = this.client_selected.address;
  //         this.age = this.client_selected.age;
  //         this.dob = this.client_selected.dob;
  //       }
  //     }
  //   });
  // }
  //obtenemos el bip por el id..
  // getBip() {
  //   if (this.patient_identifier !== null && this.patient_identifier !== undefined) {
  //     this.bipService.getBipByUser(this.patient_identifier).subscribe((resp) => {
  //       console.log(resp);

  //       this.bip_selected = resp; //asigamos una variable a la respuesta
  //       this.bip_selectedid = resp.bip.id; //obtenemos de nuevo el bip pero para verificar si es actualizar o crear en la funcion

  //       this.type_of_assessment = this.bip_selected.type_of_assessment;

  //       (this.background_information =
  //         this.bip_selected.bip.background_information),
  //         (this.previus_treatment_and_result =
  //           this.bip_selected.bip.previus_treatment_and_result),
  //         (this.current_treatment_and_progress =
  //           this.bip_selected.bip.current_treatment_and_progress),
  //         (this.education_status = this.bip_selected.bip.education_status),
  //         (this.phisical_and_medical_status =
  //           this.bip_selected.bip.phisical_and_medical_status),
  //         (this.assestment_conducted =
  //           this.bip_selected.bip.assestment_conducted),
  //         (this.strengths = this.bip_selected.bip.strengths);
  //       this.weakneses = this.bip_selected.bip.weakneses;

  //       this.documents = this.bip_selected.documents_reviewed;
  //       console.log(this.documents);

  //       this.maladaptives = this.bip_selected.maladaptives;
  //       this.maladaptive_behavior = this.bip_selected.maladaptives?.[0].title;

  //       this.assesstments = this.bip_selected.assestment_conducted_options;
  //       this.assesstmentsDocuments =
  //         this.bip_selected.assestment_conducted_options;

  //       this.hypothesis_based_intervention =
  //         this.bip_selected.bip.hypothesis_based_intervention;
  //       this.assestmentEvaluationSettings =
  //         this.bip_selected.assestmentEvaluationSettings;

  //       this.accesstoTangibles = this.bip_selected.tangibles;
  //       this.accesstoAttention = this.bip_selected.attention;
  //       this.accesstoEscape = this.bip_selected.escape;
  //       this.accesstoSensories = this.bip_selected.sensory;

  //       this.phiysical_and_medical =
  //         this.bip_selected.bip.phiysical_and_medical;
  //       this.phiysical_and_medical_status =
  //         this.bip_selected.phiysical_and_medical_status;

  //       this.prevalent_setting_event_and_atecedents =
  //         this.bip_selected.prevalent_setting_event_and_atecedents;
  //       this.interventions = this.bip_selected.interventions;
  //     });
  //   }
  // }
  //manejo de listas para json

  //Access to Tangibles/Attention/Attention/escape/sensory

  //Access to Tangibles/Attention

  //fin listados
}
*/
